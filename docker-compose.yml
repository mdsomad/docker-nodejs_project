version: "3.8"
name: dockerdev
services:
  #?ğŸ‘‡Yah hai service 1
  nodeapp:
    build:
      context: ./myserver #? ğŸ‘ˆ Is tarike se automatically image build kar leta hai manually image build karne ki jarurat nahin padta
      dockerfile: Dockerfile
    container_name: samplewala-server #? ğŸ‘ˆ Is tarike se container ka name define kar sakte hain
    environment:
      - PORT=4000 #? ğŸ‘ˆ Yah Ek Array hai
      - MONGO_URL=mongodb://admin:password@mongodb #? ğŸ‘ˆ serviceName Add mongodb url
    ports: #? ğŸ‘‡ Yah Bhi Ek Array hai
      - "4000:4000" #? ğŸ‘ˆ Port expose
    depends_on: #? ğŸ‘ˆ yah MongoDB ke upar dependent Hai Pahle MongoDB start hoga Uske bad hi yah start hoga
      - mongodb #? ğŸ‘ˆ serviceName

  #?ğŸ‘‡Yah hai service 2
  mongodb:
    image: mongo
    container_name: dockerdevDB
    ports:
      - "27017:27017" #? ğŸ‘ˆ Port expose
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    # volumes:
    #   - ./data:data/db   #? ğŸ‘ˆ Is Tarike se basically Jahan per docker compose file Hai vahin per folder Banakar data store kar deta hai MongoDB ka
    volumes:
      - dockerdev-data:data/db #? ğŸ‘ˆ Is tarike se niche Banaya Hua custom volume ko assign kar sakte hain

  #?ğŸ‘‡Yah hai service 3
  authservice:
    build:
      context: ./auth #? ğŸ‘ˆ Is tarike se automatically image build kar leta hai manually image build karne ki jarurat nahin padta
      dockerfile: Dockerfile
    container_name: samplewala-authservice
    ports:
      - "5000:5000" #? ğŸ‘ˆ Port expose
    depends_on:
      - nodeapp
    environment:
      - PORT=5000

  #?ğŸ‘‡Yah hai service 4
  client:
    build:
      context: ./client #? ğŸ‘ˆ Is tarike se automatically image build kar leta hai manually image build karne ki jarurat nahin padta
      dockerfile: Dockerfile
    ports:
      - "3000:3000" #? ğŸ‘ˆ Port expose
    environment:
      - SERVER_URL=http://nodeapp:4000
    depends_on:
      - authservice
    develop:
      watch:
        - path: ./client/package.json
          action: rebuild
        - path: ./client/package-lock.json
          action: rebuild
        - path: ./client
          target: /app
          action: sync
    # ! ğŸ‘‡ Is tarike se bhi use kar sakte hain development ke liye lekin yah Tarika Sahi Nahin Hai use karne ke liye (upar wala watch Mod hi Tarika badhiya hai use karne ke liye development)
    # volumes:
    #   - ./client:/app

  volumes:
    dockerdev-data:
      driver: local
